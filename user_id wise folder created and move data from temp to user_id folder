@api_view(['GET', 'POST',])
def file_upload(request):

    if request.method == 'POST':

        images=request.FILES.getlist('file')  # get images from file 
        print('upload image name ---',images)

        upload_data = []

        if images:

            for image in images:

                new_uuid = uuid.uuid4() 
                print('new_uuid ------------',new_uuid)
           
                split_image_name = str(image).split('.',1)[0]
                print('split_image_name ----',split_image_name)

                split_image_name = new_uuid
                image_uuid = split_image_name
                storage = FileSystemStorage(location='temp_location/')
                path = storage.save(image_uuid, image)
                print('temp_location_path --', path)
                upload_data.append(path)
                print('----------------------- uuid created for upload_data ----------------------')

            #return Response({"Status": "Success", "UUID": upload_data}, status=status.HTTP_200_OK)
            return Response({"response": True, "return_code": "success", "result": {"upload_data":upload_data}, "message": success["success"]},  status=status.HTTP_200_OK)
        
        #return Response({"Status":"Failed", "Error":"No Data Found"}, status=status.HTTP_404_NOT_FOUND)
        return Response({"response": False, "return_code":"Failed", "result": {}, "message": "No Data Found"},  status=status.HTTP_404_NOT_FOUND)

# --------------------------------------------------------------- file_post() ----------------------------------------------------------------------------------
@transaction.atomic  # 13-07-2022 11:00 AM
@api_view(['GET', 'POST',])
def file_post(request):

    if request.method == 'POST':

        received_image=request.POST.get('image')
        print('upload image name --->',received_image)
        received_uuid = request.POST.get('uuid')
        print('uuid name ----------->',received_uuid)
        received_content_type = request.POST.get('content_type')
        print('content type -------->',received_content_type)
        post_data = []
        flag = False
        # Get user_id value from session_key
        user_id = 101 #request.session.get('user_id')
        print("User_ID from session ----------->",user_id)

        try:
            if user_id:
                new_path = os.path.join('media', str(user_id))

                if os.path.isdir(new_path):
                    print("path is avaiable")
                    destination_path = new_path+'/'
                    print('if_destination_path -', destination_path)

                else:
                    print("path is not avaiable")
                    os.mkdir(new_path)
                    destination_path = new_path+'/'
                    print('else_destination_path -', destination_path)

        except Exception as e:
            return Response({"response": False, "return_code": "Failed", "result": {"user":"use or path not found"}, "message": str(e)},  status=status.HTTP_404_NOT_FOUND)

        source_path = "temp_location/"
        #destination_path = "media/images/"
        dir_list = os.listdir(source_path)
        print('get_data->',dir_list)

        try:

            for id in dir_list:
                if id == received_uuid:
                    print(id)
                    new_data = Image_main()
                    new_data.uuid = id
                    new_data.image_name = received_image
                    new_data.content_type = received_content_type
                    new_data.save()
                    print('---- DB SAVE ----')
                    shutil.move(source_path + id, destination_path + id)
                    print('--- UUID MOVE ---')
                    post_data.append(id)
                    flag = True
                    
                if flag:
                    print('----------------------- post created ----------------------')
                    #return Response({"Status": "Success", "Detail":"Post Created"}, status=status.HTTP_200_OK)
                    return Response({"response": True, "return_code": "success", "result": {"post_data": post_data}, "message": success["success"]},  status=status.HTTP_200_OK)
            

            #return Response({"Status":"Failed", "Error":"No UUID Found"}, status=status.HTTP_404_NOT_FOUND)
            return Response({"response": False, "return_code": "Failed", "result": {}, "message":"No UUID Found"},  status=status.HTTP_404_NOT_FOUND)
        
        except Exception as e:
            transaction.set_rollback(True)
            #return Response({"Status":"Failed", "Error":str(e)},status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            return Response({"response": False, "return_code": "Failed", "result": {}, "message": str(e)},  status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    else:
        error_msg = get_error_message(post_data.errors)
        return Response({"response": False, "return_code":"Failed", "result": {}, "message": "No Data Found"},  status=status.HTTP_404_NOT_FOUND)
        #return Response({"Status":"Failed", "Error":"No Data Found"}, status=status.HTTP_404_NOT_FOUND)
